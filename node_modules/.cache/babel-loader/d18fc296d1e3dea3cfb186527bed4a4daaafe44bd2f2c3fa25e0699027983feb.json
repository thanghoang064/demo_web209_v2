{"ast":null,"code":"import * as actions from './type';\nconst initCounterState = {\n  counter: 0\n};\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initCounterState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actions.INCREASE_COUNT:\n      state = {\n        ...state,\n        counter: state.counter + action.payload\n      };\n      break;\n  }\n  return state;\n};\nexport default counterReducer;","map":{"version":3,"names":["actions","initCounterState","counter","counterReducer","state","arguments","length","undefined","action","type","INCREASE_COUNT","payload"],"sources":["/Users/hoangthang/Desktop/react/demo/src/store/counter/reduce.ts"],"sourcesContent":["import { CounterAction } from \"./action\"\nimport * as actions from './type'\n\nexport interface ICounterState  {\n    counter : number\n}\nconst initCounterState :ICounterState = {\n    counter :0\n}\n\nconst counterReducer =  (state : ICounterState = initCounterState,action:CounterAction): ICounterState => {\n    switch(action.type) {\n        case actions.INCREASE_COUNT :\n            state = {\n                ...state, \n                counter:state.counter + action.payload\n            }\n        break;    \n\n    }\n    return state;\n}\n\nexport default counterReducer;"],"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,QAAQ;AAKjC,MAAMC,gBAA+B,GAAG;EACpCC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,cAAc,GAAI,SAAAA,CAAA,EAAkF;EAAA,IAAjFC,KAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,gBAAgB;EAAA,IAACO,MAAoB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClF,QAAOC,MAAM,CAACC,IAAI;IACd,KAAKT,OAAO,CAACU,cAAc;MACvBN,KAAK,GAAG;QACJ,GAAGA,KAAK;QACRF,OAAO,EAACE,KAAK,CAACF,OAAO,GAAGM,MAAM,CAACG;MACnC,CAAC;MACL;EAEJ;EACA,OAAOP,KAAK;AAChB,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}