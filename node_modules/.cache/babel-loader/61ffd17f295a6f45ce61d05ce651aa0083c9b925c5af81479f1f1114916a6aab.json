{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  nanas: [],\n  nana: {\n    ten: \"\",\n    namsinh: 0\n  }\n};\nconst nanaSlice = createSlice({\n  name: 'ddddddddd',\n  initialState: initialState,\n  reducers: {\n    loadStudentList: (state, action) => {\n      state.nanas = action.payload;\n      console.log('state.students', state.nanas);\n    },\n    addNewStudent: (state, action) => {\n      // state.nanas.unshift(action.payload)\n      state.nanas.push(action.payload);\n    },\n    detailStudent: (state, action) => {\n      // state.nanas.unshift(action.payload)\n      state.nanas.push(action.payload);\n    },\n    searchStudent1: (state, action) => {\n      //  console.log(initialState.nanas);\n      // state.nanas.map(student => \n\n      // )\n\n      const searchTerm = action.payload.searchTerm;\n      const filteredNanas = action.payload.nanas.filter(student => student.ten && student.ten.toLowerCase().includes(searchTerm));\n      state.nanas = filteredNanas;\n\n      //  state.nanas = filteredNanas;\n      // state.nanas.filter(student => student.ten.toLowerCase().includes(searchTerm));\n\n      // state.students.unshift(action.payload)\n      // const orderExistingIndex = state.students.findIndex(student => student.ten === ac)\n    }\n  }\n});\n\nexport const {\n  loadStudentList,\n  addNewStudent,\n  searchStudent1\n} = nanaSlice.actions;\nexport default nanaSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","nanas","nana","ten","namsinh","nanaSlice","name","reducers","loadStudentList","state","action","payload","console","log","addNewStudent","push","detailStudent","searchStudent1","searchTerm","filteredNanas","filter","student","toLowerCase","includes","actions","reducer"],"sources":["/Users/hoangthang/Desktop/react/demo_web209_v2/src/toolkit/nana/nanaSlice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { INana, INanaState, SearchPayload } from \"./nana.interface\";\n\n\nconst initialState: INanaState = {\n    nanas: [],\n    nana : {ten: \"\",namsinh : 0}\n}\n\n\nconst nanaSlice = createSlice({\n    name: 'ddddddddd',\n    initialState: initialState,\n    reducers: {\n        loadStudentList: (state, action: PayloadAction<INana[]>) => {\n                state.nanas = action.payload\n                console.log('state.students', state.nanas)\n            },\n        addNewStudent: (state, action: PayloadAction<INana>) => {\n            // state.nanas.unshift(action.payload)\n            state.nanas.push(action.payload);\n        },\n        detailStudent: (state, action: PayloadAction<INana>) => {\n            // state.nanas.unshift(action.payload)\n            state.nanas.push(action.payload);\n        },\n        searchStudent1: (state, action: PayloadAction<SearchPayload>) => {\n            \n        //  console.log(initialState.nanas);\n        // state.nanas.map(student => \n\n        // )\n          \n            const searchTerm = action.payload.searchTerm;\n            const filteredNanas = action.payload.nanas.filter(student => student.ten && student.ten.toLowerCase().includes(searchTerm) );\n            state.nanas = filteredNanas;\n          \n            //  state.nanas = filteredNanas;\n            // state.nanas.filter(student => student.ten.toLowerCase().includes(searchTerm));\n            \n            // state.students.unshift(action.payload)\n            // const orderExistingIndex = state.students.findIndex(student => student.ten === ac)\n        \n        }\n    },\n})\n\nexport const { loadStudentList, addNewStudent,searchStudent1 } = nanaSlice.actions;\nexport default nanaSlice.reducer;"],"mappings":"AAAA,SAAwBA,WAAW,QAAQ,kBAAkB;AAI7D,MAAMC,YAAwB,GAAG;EAC7BC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAG;IAACC,GAAG,EAAE,EAAE;IAACC,OAAO,EAAG;EAAC;AAC/B,CAAC;AAGD,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC1BO,IAAI,EAAE,WAAW;EACjBN,YAAY,EAAEA,YAAY;EAC1BO,QAAQ,EAAE;IACNC,eAAe,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACpDD,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACC,OAAO;MAC5BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,KAAK,CAACR,KAAK,CAAC;IAC9C,CAAC;IACLa,aAAa,EAAEA,CAACL,KAAK,EAAEC,MAA4B,KAAK;MACpD;MACAD,KAAK,CAACR,KAAK,CAACc,IAAI,CAACL,MAAM,CAACC,OAAO,CAAC;IACpC,CAAC;IACDK,aAAa,EAAEA,CAACP,KAAK,EAAEC,MAA4B,KAAK;MACpD;MACAD,KAAK,CAACR,KAAK,CAACc,IAAI,CAACL,MAAM,CAACC,OAAO,CAAC;IACpC,CAAC;IACDM,cAAc,EAAEA,CAACR,KAAK,EAAEC,MAAoC,KAAK;MAEjE;MACA;;MAEA;;MAEI,MAAMQ,UAAU,GAAGR,MAAM,CAACC,OAAO,CAACO,UAAU;MAC5C,MAAMC,aAAa,GAAGT,MAAM,CAACC,OAAO,CAACV,KAAK,CAACmB,MAAM,CAACC,OAAO,IAAIA,OAAO,CAAClB,GAAG,IAAIkB,OAAO,CAAClB,GAAG,CAACmB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,UAAU,CAAE,CAAC;MAC5HT,KAAK,CAACR,KAAK,GAAGkB,aAAa;;MAE3B;MACA;;MAEA;MACA;IAEJ;EACJ;AACJ,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEX,eAAe;EAAEM,aAAa;EAACG;AAAe,CAAC,GAAGZ,SAAS,CAACmB,OAAO;AAClF,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}